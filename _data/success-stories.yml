cases:

  - name: Avast
    link: Avast_10-25-19.pdf
    logo: cases-logos/avast.jpg
    text: The whole goal here is to not wake people up in the middle of the night. The rollback and no-downtime deployment features are things everybody wants to do. The thing that Spinnaker promises is automated canary analysis. That to me is the holy grail to enabling continuous deployment.

  - name: Lookout
    link: Lookout_10072019.pdf
    logo: cases-logos/lookout.jpg
    text: We knew our product had game changing potential in the government sector, but our existing deployment framework was too human-intensive and time consuming for FedRAMP compliance. Spinnaker provided the platform, support, and delivery pipeline we needed to bring our patch deployment times up to speed.	
  
  - name: MakerBot
    link: Case%20Study%20Makerbot%20-%20Letter%20size_10-23-19.pdf
    logo: cases-logos/markerbot.jpg
    text: We originally envisioned transitioning toward Kubernetes on Google Cloud over three quarters. With Spinnakerâ€™s open source flexibility, we completed the full migration in just 2.5 months. 

  - name: Netflix
    link: https://medium.com/netflix-techblog/global-continuous-delivery-with-spinnaker-2a6896c23ba7
    logo: cases-logos/netflix.jpg
    text: The community uptake has been tremendous. Having a platform that has an extensible model, and accommodates multiple cloud providers out of the box, means that we are one large community rather than a bunch of micro-communities focused on various forks. This has the benefit of allowing everyone within the community to take advantage of various innovations.

  - name: Waze
    link: https://cloud.google.com/blog/products/gcp/guest-post-multi-cloud-continuous-delivery-using-spinnaker-at-waze
    logo: cases-logos/waze.jpg
    text: Thanks to Spinnaker, developers can focus on developing business logic rather than becoming experts on each cloud platform. Teams can track the lifecycle of a deployment using several notification mechanisms including email, Slack, and SMS, allowing them to coordinate handoffs between developer and QA teams.

testimonials:
  - name: Airbnb
    logo: testimonials-logos/airbnb_logo.png
    quote: "We are planning to open up Spinnaker to all services and make it the default deployment tool in 2020."
    questions:
      - question: How did you discover Spinnaker?
        answer: I watched a tech talk in 2017 about how Waze was using Spinnaker and Automated Canary Analysis. I'd been following Spinnaker's development ever since.
                There had been several discussions in the past about Spinnaker, but these never really materialized.
                Late 2018, when the time was right for Airbnb to consider a new solution for Continuous Delivery, Spinnaker was added to the shortlist.

      - question: What was your experience getting started with Spinnaker?
        answer: Airbnb's existing deployment tooling (Deployboard), wasn't built with multi-stage releases in mind. While it does a good job at deploying to a specific environment. It didn't allow for orchestration of deployment pipelines. While we built good validation tooling like integration testing frameworks and traffic replay tools in-house, we couldn't integrate them into the deployment process due to the lack of deployment pipelines. As a result, these tools were not living up to their full potential.
               As Airbnb transitioned into a Service Oriented Architecture, the deployment process became more complex. Teams ended up writing manual run books with many steps to follow to deploy a service. As the complexity increased, so did the number of incidents.
               Deployment related incidents started having a material effect on our overall website up-time. Spinnaker provides Automated Canary Analysis out of the box. Which is another big lever for us.
               Rather than extending the tooling we have, we decided to invest in Spinnaker. We can leverage the community and contribute back, rather than building a closed-source in-house deployment tool. Many of the deployment challenges we face are not unique to just Airbnb.

      - question: Where are you today with Spinnaker? What benefits has it provided to your team?
        answer: Our tech stack consists of many Java and Ruby backend services running on Kubernetes. Our frontend is powered by Node. Airbnb is doing a large push to migrate all of its infrastructure to Kubernetes. We are migrating our monolith to SOA.
               We are adopting Spinnaker slowly; rather than doing a forced mass-migration, we want to prove it's value-add for Airbnb engineering. We started by deploying Spinnaker with Spinnaker, so that we could get a handle on what it would take to deploy Airbnb services with Spinnaker.
               After that, we migrated a small subset of non-critical services. We used customer feedback from these very early adopters to drive feature development. Some Airbnb specific tooling like our in-house CI system needed to be integrated with Spinnaker.
               Once we'd proven that we could deploy these services, we moved towards onboarding the most critical services onto Spinnaker. The goal here is to prevent regressions. This is where we are currently at.
               We are in the process migrating all of Airbnb's payments stack and most of our core services to Spinnaker. We are already seeing the effectiveness of Spinnaker and ACA. It has already prevented a dozen regressions.
               In parallel, we continue feature development and are load-testing Spinnaker to ensure that we can handle all of Airbnb's services. We are planning to open up Spinnaker to all services and make it the default deployment tool in 2020.
  
      - question: What is missing or could be improved in Spinnaker?
        answer: Spinnaker's User Interface can be hit or miss. Some parts are not as user-friendly. For example, figuring out why ACA failed can take up to 5 mouse-clicks. We are working on improving some parts of this and are hoping to eventually contribute back to the open source community.
                We are very excited about the work being done around a plugin-based architecture. While Spinnaker itself is already fairly extensible as a result of it being built in Spring-boot, the team believes this will really turn Spinnaker into an extensible platform for Continuous Delivery.
                In 2020, once our traffic tooling supports this, we will try and leverage some of the more advanced deployment patterns Spinnaker provides like Blue/Green deployments.
                We are also excited to use Spinnaker as a more general workflow tool to run things like migrations, database schema changes, and many other processes that can be automated with deployment pipelines.
                We'd also love to integrate ACA with our feature-flagging system (Trebuchet) so that we can safely launch features and ramp up the rollout over time.

  - name: Comcast
    logo: testimonials-logos/comcast.png
    quote: "Installing it on a VM was a breeze."
    questions:
      - question: How did you discover Spinnaker?
        answer: I was actively using Spinnaker in a previous client project.

      - question: What was your experience getting started with Spinnaker?
        answer: Installing it on VM was a breeze whereas installing it on K8s needed some extra steps and was not clearly documented.

      - question: Where are you today with Spinnaker? What benefits has it provided to your team?
        answer: Spinnaker is a good CD tool for K8s deployments.

      - question: What is missing or could be improved in Spinnaker?
        answer: Documentation could be improved.

  - name: Cure.fit
    logo: testimonials-logos/curefit_logo.png
    quote: "We wanted Jenkins to do nothing more than its CI job and were looking for something that does CD reliably."
    questions:
      - question: How did you discover Spinnaker?
        answer: |
          We were planning to move our backends from VMs to Kubernetes. kubectl is a CLI that is used to update k8s' metadata and perform deployments. However, when you are an engineering division with 100 engineers, allowing each one to independently perform `kubectl apply` may result in unexpected state of services, especially when you have 50 of those. And giving Jenkins significant permissions to do that also felt wrong. We wanted Jenkins to do nothing more than its CI job and were looking for something that does CD reliably. We explored Jenkins-X, Harness, Kubeflow and Spinnaker. We tried them all and finally settled with Spinnaker for multiple reasons:
            1. Easy pipelines
            2. Auth and Authz
            3. Capable of maintaining multiple k8s accounts easily: stage, alpha, prod, backup, integration.
            4. versioned config maps and secrets.
            5. Easy rollbacks...
            Just to name a few. 

      - question: What was your experience getting started with Spinnaker?
        answer: Since the initial k8s setup was going to be small, we deployed Spinnaker as a part of the cluster itself. As of today, we're migrating Spinnaker to its own cluster because it needs to manage many clusters, so we see having it as a separate entity useful. We had Jenkins create Docker images for applications, and push it to ECR. Jenkins also updated the helm charts if required and pushed it to a chart museum. Spinnaker pipelines take Jenkins as a trigger, and uses the build.properties from Jenkins if required. It then bakes data from build.properties into the helm chart and deploys it to the respective cluster. 
                We used halyard to deploy Spinnaker. We have a set of commands that are part of the values.yaml for Spinnaker. Using helm install deploys Spinnaker onto the prod cluster. 

      - question: Where are you today with Spinnaker? What benefits has it provided to your team?
        answer: Currently Spinnaker serves 50% of all our service covering 70% of all our deployments pipelines. It allows for teams to test their changes on alpha before deploying to prod via manual judgement, which is the most popular feature here. It has reduced the amount of bad code entering production significantly. Moreover, having multiple environments has become easier because deploying in them is easy. Earlier we only had stage and prod as that alone was hard to manage for a small team. The deployment time is significantly lesser than what it was when we were on VMs, almost by 80%. Rollbacks is super easy, esp with versioned configmaps and secrets. This was one thing that went as a feature request in a meeting with Jenkins-X team.

      - question: What is missing or could be improved in Spinnaker?
        answer: It takes 2 mins for new deployments to show up after a bad deployment has been detected. So it's not possible to immediately rollback on the first error occurrence. Instant rollback trigger is a much required feature. 
                For 2 mins, it wont show the new deployment under infrastructure, hence rollback is not possible. 

  - name: Diligent
    logo: testimonials-logos/diligent_logo.png
    quote: "2000% faster to create new services."
    questions:
      - question: How did you discover Spinnaker?
        answer: |
          After a lot of R#38;D looking at improving our delivery model, we found Spinnaker to be the best tool for the job.

      - question: What was your experience getting started with Spinnaker?
        answer: Some software solutions get harder to use the more you find their limitations. Spinnaker is the opposite - we have got faster and faster the more we use it.

      - question: Where are you today with Spinnaker? What benefits has it provided to your team?
        answer: |
          A few metrics: 
            1600% improvement in Cycle time in some spaces (68 days to 4 days).
            2000% faster to create new services (160 elapsed hours to under a day)

      - question: What is missing or could be improved in Spinnaker?
        answer: The base Spinnaker docs are not good. 
                Armory provides much more useful documentation.

  - name: SAP Customer Experience
    logo: testimonials-logos/sap.png
    quote: "Our largest development projects are deploying 25 times in production (daily average)."
    questions:
      - question: How did you discover Spinnaker?
        answer: SAP CX Site Reliability Engineering team discovered Spinnaker a year ago. At that time our team was tasked to build a blueprint for a standard CI/CD pipeline that could improve developer's productivity and reduce the lengthy development cycles. We explored various solutions from GitLab, Bamboo, Jenkins and Concourse. During our POCs, we got a lot of success with Spinnaker.

      - question: What was your experience getting started with Spinnaker?
        answer: The experience in general was a mix of challenges and positiveness coming from the fact that Spinnaker was open source. We spent a lot of time on the various community Slack channels, asking questions and getting help from peers. We also did a lot of trial and error while configuring Spinnaker. But eventually, we started to understand how Spinnaker was architected and it made our experience more intuitive. We did not attend a class or webinar on Spinnaker back then. The decision to use it was solely based on the successful POC we did.

      - question: Where are you today with Spinnaker? What benefits has it provided to your team?
        answer: Today, we are using Spinnaker to run deployment pipelines for 10 development units. It translates to 30 Kubernetes clusters in production and 40 distinct deployment pipelines based on official templates that our team is maintaining.
                Our largest development projects are deploying 25 times in production (daily average). We have teams performing 200 daily deployments in what we call PR namespaces, which are temporary namespaces to validate features before they reach the master branch and hit production.
                Spinnaker has helped us scale our CI/CD service beyond our line of business. We are now offering it as a shared service across SAP. In addition to the scale it provided, the speed to onboard new teams has been another important benefit. By leveraging the Halyard configuration coupled with a GitOps approach, we are able to onboard teams using a self service model. Spinnaker also allows transparency and collaboration, its integration with Slack which was already widely used helps the teams providing insights on their deployment flows.

      - question: What is missing or could be improved in Spinnaker?
        answer: Documentation and API to manage the Halyard configuration are two important things for us. We would to programmatically configure Spinnaker without having to manipulate config files. our team has started wrapping Halyard into an API, but that work is moving slowly since we want to see where Spinnaker is heading to. We also need more security, especially around the docker images that are used by Spinnaker.

  - name: TransUnion
    logo: testimonials-logos/transunion.png
    quote: "We love the simple command-line interface for administration, integration with multiple platforms, and easy configurability using pipelines."
    questions:
      - question: How did you discover Spinnaker?
        answer: We love the simple command-line interface for administration, integration with multiple platforms, and easy configurability using pipelines.

      - question: What was your experience getting started with Spinnaker?
        answer: In our infrastructure, we were using Ansible and slowly Spinnaker started replacing it.

      - question: Where are you today with Spinnaker? What benefits has it provided to your team?
        answer: We are using Spinnaker in dev, test, and production. We have implemented Spinnaker as a deployment tool for many applications. Key advantages include faster deployments, user confirmation when needed, and access control. 

      - question: What is missing or could be improved in Spinnaker?
        answer: The UI can be made more intuitive and troubleshooting can be made a lot easier.

