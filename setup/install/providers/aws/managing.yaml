AWSTemplateFormatVersion: '2010-09-09'
Description: Setup AWS CloudProvider for Spinnaker
Parameters:
  SpinnakerVPCCIDR:
    Description: CIDR Block for Developer VPC
    Type: String
    Default: 10.100.0.0/16
  SpinnakerPublicSubnetCIDR:
    Description: SpinnakerEnv Public Subnet
    Type: String
    Default: 10.100.10.0/24
    ConstraintDescription: IP CIDR must be in the range of your VPC
  SpinnakerPrivateSubnetCIDR:
    Description: SpinnakerEnv Private Subnet
    Type: String
    Default: 10.100.11.0/24
    ConstraintDescription: IP CIDR must be in the range of your VPC
  UseAccessKeyForAuthentication:
    Description: >
      Select Yes, if you want to use Access Keys and Secrets for Authentication.Selecting Yes will also create Access Keys and Secrets,
      which will be visible in Outputs Section, once the template runs successfully. It is recommended that you update the stack and remove the outputs section.
      Select No, if you will use EC2 Instance profile.
    Type: String
    AllowedValues:
      - true
      - false

Conditions:
  CreateAccessKeys : !Equals [ !Ref UseAccessKeyForAuthentication, true ]
  CreateEc2Role: !Equals [ !Ref UseAccessKeyForAuthentication, false ]
Resources:
  BaseIAMRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /
    Type: AWS::IAM::Role

# Creates EC2 Role and Instance Profile
  SpinnakerInstanceProfile:
    DependsOn: SpinnakerAuthRole
    Condition: CreateEc2Role
    Properties:
      Path: /
      Roles:
        - !Ref 'SpinnakerAuthRole'
    Type: AWS::IAM::InstanceProfile
  SpinnakerAuthRole:
    Properties:
      RoleName: SpinnakerAuthRole
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess
    Type: AWS::IAM::Role
    Condition: CreateEc2Role

# Creates IAM user and AccessKeys
  SpinnakerUser:
    Description: User identity Spinnaker uses to create AWS resources
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess
    Type: AWS::IAM::User
    Condition: CreateAccessKeys
  SpinnakerAccessKey:
      DependsOn: SpinnakerUser
      Condition: CreateAccessKeys
      Description: Generate AccessKey for Spinnaker
      Properties:
        UserName: !Ref 'SpinnakerUser'
      Type: AWS::IAM::AccessKey

# Either Keys or Instances

  SpinnakerAssumeRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      Users:
        - !If [CreateAccessKeys,!Ref SpinnakerUser,!Ref 'AWS::NoValue']
      Roles:
        - !If [CreateEc2Role,!Ref SpinnakerAuthRole,!Ref 'AWS::NoValue']
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:role/spinnakerManaged # This is the current account
              #- arn:aws:iam::YOUR_MANAGED_ACCOUNT1:role/spinnakerManaged # Keep Adding Managed Accounts like this
      PolicyName: SpinnakerAssumeRolePolicy

# Creates a single subnet VPC
  SpinnakerVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'SpinnakerVPCCIDR'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: VPC
          Value: Spinnaker VPC
        - Key: Name
          Value: SpinnakerVPC
  SpinnakerInternetGateway:
    Type: AWS::EC2::InternetGateway
  SpinnakerAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'SpinnakerVPC'
      InternetGatewayId: !Ref 'SpinnakerInternetGateway'
  SpinnakerPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'SpinnakerVPC'
      CidrBlock: !Ref 'SpinnakerPublicSubnetCIDR'
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Join
            - .
            - - !Ref 'SpinnakerVPC'
              - internal
              - !Select
                - '0'
                - !GetAZs ''
  SpinnakerPublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn:
      - SpinnakerVPC
      - SpinnakerAttachGateway
    Properties:
      VpcId: !Ref 'SpinnakerVPC'
      Tags:
        - Key: Name
          Value: Spinnaker Public Route Table
  SpinnakerPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'SpinnakerPublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'SpinnakerInternetGateway'
  SpinnakerPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'SpinnakerPublicSubnet'
      RouteTableId: !Ref 'SpinnakerPublicRouteTable'


Outputs:
  AccessKeyId:
    Condition: CreateAccessKeys
    Value: !Ref SpinnakerAccessKey
  Secret:
    Condition: CreateAccessKeys
    Value: !GetAtt SpinnakerAccessKey.SecretAccessKey
  ManagingAccountId:
    Value: !Ref AWS::AccountId
  AuthArn:
    Value: !If [CreateAccessKeys,!GetAtt SpinnakerUser.Arn,!GetAtt SpinnakerAuthRole.Arn ]
